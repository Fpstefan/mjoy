["core.txt" geladen] print

(*** SoftCore ***)
. == 1 [] '!
print == 2 [] '!
showgraph == 3 [] '!
loadstring == 4 [] '!
savestring == 5 [] '!

clear == [] unstack
(uncons == dup first swap rest)
(swap3 == [] cons cons cons reverse uncons uncons uncons pop) (rot wie???)
(rotate == [] cons cons cons reverse uncons uncons uncons pop)
pair == [] cons cons
unpair == uncons uncons pop

(swons == swap cons)
(unswons == uncons swap)
swoncat == swap concat
(rolldown == [swap] dip swap)
(rollup   == swap [swap] dip)

(neg == 0 swap -)

(not == [false] [true] if)
(and == [] [pop false] if)
(or == [pop true] [] if)
(xor ==)
<> == = not
!= == = not
> == swap <
<= == swap < not
>= == < not

add == +
sub == -
mul == *
div == /
eq == =
lt == <
ne == <>
gt == >
le == <=
ge == >=

( ? sind die alle nötig? )
(zerop == 0 =)
(null == dup [] = [pop true] [0 =] if)
(nullp == [] =)
(consp == type 'cons =)
(ident == type 'ident =)
(integer == type 'integer =)
(float == type 'float =)
(char == type 'char =)
(string == type 'string =)
(listp == dup [] = [pop true] [type 'cons =] if)
(undef == 'undef =)

copy == dup [dup 1 + index swap] times pop
collect == [] swap [cons] times

setindex ==
(index == stack swap indexrec) (index greift auf stack zu)
(indexrec == dup 0 = [pop first] [-1 + swap rest swap indexrec] if)
(reverse == [] reverserec)
(reverserec == swap dup [] = [pop] [swap 2 index first swap cons swap rest swap reverserec] if)
(concat == swap reverse [swons] step)
(concat == swap reverse swap concatrec)
(concatrec == swap dup [] = [pop] [swap 2 index first swap cons swap rest swap concatrec] if)
(take  liste num -- liste == []   in num out   [2 index 0 = not 4 index [] = not and] 
   [3 index first swons swap 1 - swap rotate rest rotate] while reverse [pop pop] dip)
(drop  liste num -- liste == [2 index [] = not 2 index 0 = not and] [1 - swap rest swap] while pop)
(list == [] listrec)
(listrec == swap dup 0 = [pop] [-1 + rotate swons listrec] if)
(size == 0 sizerec)
(sizerec == swap dup [] = [pop] [rest swap 1 + sizerec] if)

map == [] rollup [i swons] cons step reverse
fold == [swap] dip step
length == 0 swap [pop 1 +] step
(reverse == [] swap [swons] step) (stepvariante)
filter == [] rollup [i [swons] [pop] if] cons [dup] swap concat step reverse
in == false rotate [= or] cons ['] swap concat step
trans == dup first [] = [pop []] [dup [first] map swap [rest] map trans cons] if

(get == dictget)
(put == dictput)

dictget == get
(dictget == 2 index [] =
           [pop pop []]
           [ 2 index first 2 index = 
             [pop rest first]
             [swap rest rest swap dictget]
             if ]
           if)
dictput == put
(dictput    dict key value -- dict    == rotate [] dictputrec)
(dictputrec   value key dict rev -- dict   ==
  2 index [] =
  [4 index [] cons 4 index swons swap reverse swap concat swap pop swap pop swap pop]
  [ 2 index first 4 index =
    [reverse swap rest rest 4 index swons 3 index swons concat swap pop swap pop]
    [2 index first swons swap rest swap 2 index first swons swap rest swap dictputrec]
    if]
  if) (was mit dip machen)

(*** Turtlegraphic ***)
(2pi == pi pi +)	(die Turtle läuft im Bogenmaß !)
(rad  deg -- rad == pi * 180 /)	(torad ?)
(deg  rad -- deg == 180 * pi /)	(todeg ?)
offs == id
init ( -- turtle) == [stack [] x 0 y 0 angle 0 pen true color 0 size 1 brush 16777215]
draw (turtle -- ) == 'stack dictget reverse showgraph

moveto (dict x y -- dict) == rotate dup 'stack dictget 3 index swons 4 index swons
   'stack swap dictput swap 'x swap dictput swap 'y swap dictput
moverel (dict relx rely -- dict) == 3 index 'y dictget + swap 3 index 'x dictget + swap moveto
move (dict rel -- dict) == 2 index 'angle dictget(dict rel angle)
                           dup cos 3 index * 4 index 'x dictget + 
                           2 index sin 4 index * 5 index 'y dictget +
                           rotate pop rotate pop (dict   sumrelbogx sumrelbogy) moveto
turnto (dict ang -- dict) == offs doturnto
doturnto == dup 2pi / int 2pi * - 'angle swap dictput
turn (dict ang -- dict) == offs 2 index 'angle dictget + doturnto
penup (dict -- dict) == dup 'stack dictget 'pen swons false swons 'stack swap dictput 'pen false dictput
pendown (dict -- dict) == dup 'stack dictget 'pen swons true swons 'stack swap dictput 'pen true dictput
pencolor (dict col -- dict) == swap dup 'stack dictget 'color swons 3 index swons 'stack swap dictput swap 'color swap dictput
pensize (dict size -- dict) == swap dup 'stack dictget 'size swons 3 index swons 'stack swap dictput swap 'size swap dictput
brushcolor (dict col -- dict) == swap dup 'stack dictget 'brush swons 3 index swons 'stack swap dictput swap 'brush swap dictput
circle (dict rad -- dict) == swap dup 'stack dictget 'circle swons swap rotate swons 'stack swap dictput
rectangle (dict -- dict) == dup 'stack dictget 'rect swons [] swons 'stack swap dictput (mit rect)

colors == [red 255 black 0 blue 16711680 white 16777215 green 32768 aqua 16776960
	   darkgray 8421504 fuchsia 16711935 gray 8421504 lime 65280 lightgray 12632256 maroon 128
	   navy 8388608 olive 32896 purple 8388736 silver 12632256 teal 8421376 yellow 65535 gold 55295 orange 42495]

black == 0
red == 255
white == 16777215
blue == 16711680
green == 32768
yellow == 65535
brown == 128
darkgray == 8421504
maroon == brown
darkgrey == darkgray
aqua == 16776960
fuchsia == 16711935
gray == 8421504
grey == gray
lime == 65280
lightgray == 12632256
navy == 8388608
olive == 32896
purple == 8388736
silver == 12632256
teal == 8421376
gold == 55295
orange == 42495

start == init penup 250 -250 moveto pendown 90 rad turnto
; == dup (to copy the last drawing) dup 'pen dictget [turtle] [] if draw
turtle == 1 pensize colors 'red get pencolor 120 rad turn 12 move 210 rad turn 20 move -120 rad turn 20 move 
210 rad turn 11 move

.s == stack reverse print
cs == start ;
go == penup 100 -100 moveto pendown 0 turnto

at == 1 - drop first
setrec == 2 index 1 = 
          [3 index [] = [dup []] [dup 4 index rest] if cons] 
          [ 3 index [] = 
            [ [] 4 index 4 index 1 - 4 index] 
            [ 3 index first 4 index rest 4 index 1 - 4 index] if setrec cons
          ] if 
          [pop pop pop] dip

set (list idx val) == 2 index 0 <= [pop pop pop 'undef] [setrec] if
sum == 0 [+] fold
